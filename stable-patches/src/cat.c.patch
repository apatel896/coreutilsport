diff --git a/src/cat.c b/src/cat.c
index dcf537b..7608114 100644
--- a/src/cat.c
+++ b/src/cat.c
@@ -40,6 +40,10 @@
 #include "safe-read.h"
 #include "xbinary-io.h"
 
+#ifdef __MVS__
+#include <_Ccsid.h>
+#endif
+
 /* The official name of this program (e.g., no 'g' prefix).  */
 #define PROGRAM_NAME "cat"
 
@@ -112,6 +116,15 @@ Concatenate FILE(s) to standard output.\n\
   -u                       (ignored)\n\
   -v, --show-nonprinting   use ^ and M- notation, except for LFD and TAB\n\
 "), stdout);
+#ifdef __MVS__
+      fputs (_("\
+  -B			   Disables the automatic conversion of tagged files.\n\
+  			   This option is ignored if the filecodeset or pgmcodeset options (-W option) are specified.\n\
+  -W option[,option]...    Specifies z/OS-specific options. The option keywords are case-sensitive. Possible options are:\n\
+  			   filecodeset=codeset\n\
+			   pgmcodeset=codeset\n\
+"), stdout);
+#endif
       fputs (HELP_OPTION_DESCRIPTION, stdout);
       fputs (VERSION_OPTION_DESCRIPTION, stdout);
       printf (_("\
@@ -126,6 +139,74 @@ Examples:\n\
   exit (status);
 }
 
+#ifdef __MVS__
+
+struct CcsidInfo {
+  char filecodeset[20];
+  int fileccsid;
+  char pgmcodeset[20];
+  int pgmccsid;
+};
+
+bool parse_codepage_options(const char *input, struct CcsidInfo *info) {
+    if (!input) {
+        return false;
+    }
+
+    bool found_valid_key = false;
+    memset(info, 0, sizeof(struct CcsidInfo));
+    char temp[256];
+    strncpy(temp, input, sizeof(temp) - 1);
+    temp[sizeof(temp) - 1] = '\0';
+
+    char *pair = strtok(temp, ",");
+    while (pair != NULL) {
+        char *equal = strchr(pair, '=');
+        if (!equal) {
+            return false;
+        }
+
+        *equal = '\0';
+        const char *key = pair;
+        const char *value = equal + 1;
+
+        if (strcmp(key, "filecodeset") == 0) {
+	    strcpy(info->filecodeset, value);
+	    found_valid_key = true;
+        }
+       	else if (strcmp(key, "pgmcodeset") == 0) {
+            strcpy(info->pgmcodeset, value);
+	    found_valid_key = true;
+        } 
+	else {
+            return false;
+        }
+
+        pair = strtok(NULL, ",");
+    }
+
+    if(info->filecodeset[0] == '\0')
+       strcpy(info->filecodeset, "ISO8859-1");
+
+    if(info->pgmcodeset[0] == '\0')
+       strcpy(info->pgmcodeset, "ISO8859-1");
+
+    return found_valid_key;
+}
+
+bool validate_codepage_options (struct CcsidInfo *info) {
+    if(strcmp(info->pgmcodeset, "ISO8859-1") != 0 && strcmp(info->pgmcodeset, "819") != 0)
+       return false;
+
+    info->fileccsid = __toCcsid(info->filecodeset);
+    if(!info->fileccsid) return false;
+    info->pgmccsid = __toCcsid(info->pgmcodeset);
+    if(!info->pgmccsid) return false;
+    return true;
+}
+
+#endif
+
 /* Compute the next line number.  */
 
 static void
@@ -531,6 +612,35 @@ copy_cat (void)
       }
 }
 
+#ifdef __MVS__
+#define MVS_CAT "/bin/cat"
+#define MVS_CAT_LEN (sizeof(MVS_CAT)-1)
+#include <unistd.h>
+#include <sys/types.h>
+#include <sys/wait.h>
+static bool
+do_mvs_cat (int argc, char **argv)
+{
+
+  pid_t pid = fork();
+  if (pid == 0) {
+    argv[0] = MVS_CAT;
+    execvp(MVS_CAT, argv);
+  } else if (pid > 0) {
+    int wstatus;
+    pid_t waitchild = waitpid(pid, &wstatus, WUNTRACED | WCONTINUED);
+    if (waitchild == -1) {
+      perror("waitpid");
+      return false;
+    }
+    if (WIFEXITED(wstatus)) {
+      return WEXITSTATUS(wstatus) == 0 ? true : false;
+    } else if (WIFSIGNALED(wstatus)) {
+      fprintf(stderr, "killed by signal %d\n", WTERMSIG(wstatus));
+    }
+  }
+}
+#endif
 
 int
 main (int argc, char **argv)
@@ -547,6 +657,11 @@ main (int argc, char **argv)
   bool show_ends = false;
   bool show_nonprinting = false;
   bool show_tabs = false;
+#ifdef __MVS__
+  bool disable_autocvt = false;
+  bool enable_text_conv = false;
+  struct CcsidInfo ccsid_info;
+#endif
   int file_open_mode = O_RDONLY;
 
   static struct option const long_options[] =
@@ -563,6 +678,19 @@ main (int argc, char **argv)
     {nullptr, 0, nullptr, 0}
   };
 
+#ifdef __MVS__
+  {
+    int i;
+
+    for (i=0; i<argc; ++i) {
+      if (argv[i][0] == '/' && argv[i][1] == '/') {
+        bool mvsok = do_mvs_cat(argc, argv);
+        main_exit (mvsok ? EXIT_SUCCESS : EXIT_FAILURE);
+      }
+    }
+  }
+#endif
+
   initialize_main (&argc, &argv);
   set_program_name (argv[0]);
   setlocale (LC_ALL, "");
@@ -578,8 +706,13 @@ main (int argc, char **argv)
   /* Parse command line options.  */
 
   int c;
+#ifdef __MVS__
+  while ((c = getopt_long (argc, argv, "benstuvAETBW:", long_options, nullptr))
+         != -1)
+#elif
   while ((c = getopt_long (argc, argv, "benstuvAET", long_options, nullptr))
          != -1)
+#endif
     {
       switch (c)
         {
@@ -628,6 +761,21 @@ main (int argc, char **argv)
           show_tabs = true;
           break;
 
+#ifdef __MVS__
+	case 'B':
+	  disable_autocvt = true;
+	  break;
+
+	case 'W':
+	  disable_autocvt = false;
+	  enable_text_conv = true;
+	  if (!parse_codepage_options(optarg, &ccsid_info) ||
+    	    !validate_codepage_options(&ccsid_info)) {
+    		usage(EXIT_FAILURE);
+	  }
+	  break;
+#endif
+
         case_GETOPT_HELP_CHAR;
 
         case_GETOPT_VERSION_CHAR (PROGRAM_NAME, AUTHORS);
@@ -690,6 +838,21 @@ main (int argc, char **argv)
             }
         }
 
+#ifdef __MVS__
+        if(enable_text_conv)
+	{
+	   struct f_cnvrt cvt;
+	   cvt.cvtcmd = SETCVTALL;
+    	   cvt.pccsid = ccsid_info.pgmccsid;
+           cvt.fccsid = ccsid_info.fileccsid;
+	   fcntl(input_desc,  F_CONTROL_CVT, &cvt);
+	}
+        else if(disable_autocvt)
+	{
+	   __disableautocvt(input_desc);
+	}
+#endif
+
       if (fstat (input_desc, &stat_buf) < 0)
         {
           error (0, errno, "%s", quotef (infile));
